/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head.next == null)
            return true;
        ListNode middleNode = middleNode(head);
        ListNode next = middleNode.next;
        middleNode.next = null;
        next = reverseList(next);
        while(head != null && next != null){
            if(head.val != next.val)
                return false;
            head = head.next;
            next = next.next;
        }
        return true;
    }
    
    public ListNode middleNode(ListNode head) {
        ListNode slow = head, fast = head.next;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    
    public ListNode reverseList(ListNode head) {
        if(head == null || head.next == null)
            return head;
        ListNode prev = head, curr = prev.next, ahead = null;
        prev.next = null;
        while(curr != null){
            ahead = curr.next;
            curr.next = prev;
        
            prev = curr;
            curr = ahead;
        }
        return prev;
    }
    
}

// TC:- 0(N)
// SC:- 0(1)
class Solution {
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        ArrayList<String>ans = new ArrayList<>();
        solve(0, 0, m, n, ans, new StringBuilder());
        return ans;
    }
    
    public static void solve(int row, int col, int[][]m, int n, ArrayList<String>ans, StringBuilder sb){
        if(row < 0 || col < 0 || row == n || col == n || m[row][col] == 0)
            return;
        if(row == n - 1 && col == n - 1){
            ans.add(sb.toString());
            return;
        }
        m[row][col] = 0;
        sb.append('U');
        solve(row - 1, col, m, n, ans, sb);
        sb.deleteCharAt(sb.length() - 1);
        
        sb.append('L');
        solve(row, col - 1, m, n, ans, sb);
        sb.deleteCharAt(sb.length() - 1);
        
        sb.append('D');
        solve(row + 1, col, m, n, ans, sb);
        sb.deleteCharAt(sb.length() - 1);
        
        sb.append('R');
        solve(row, col + 1, m, n, ans, sb);
        sb.deleteCharAt(sb.length() - 1);
        m[row][col] = 1;
    } 
    
}
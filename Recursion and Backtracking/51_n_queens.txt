class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>>list = new ArrayList<>();
        boolean[][]board = new boolean[n][n];
        solve(0, 0, board, list, n);
        return list;
    }
    
    public void solve(int row, int col, boolean[][]board, List<List<String>>result, int n){
        
        if(row == n){
            addAnswerToList(board, result, n);
            return;
        }
        
        if(row < 0 || col < 0 || row == n || col == n || board[row][col])
            return;
        
        if(safeToPlace(row, col, board, n)){
            board[row][col] = true;
            solve(row + 1, 0, board, result, n);
            board[row][col] = false;
        }
        solve(row, col + 1, board, result, n);
    }
    
    public void addAnswerToList(boolean[][]board, List<List<String>>result, int n){
        List<String>temp = new ArrayList<>();
        for(int i = 0; i < n; i++){
            StringBuilder sb = new StringBuilder();
            for(int j = 0; j < n; j++){
                if(board[i][j])
                    sb.append('Q');
                else
                    sb.append('.');
            }
            temp.add(sb.toString());
        }
        result.add(temp);
    }
    
    public boolean safeToPlace(int row, int col, boolean[][]board, int n){
        int i = row, j = col;
        while(i >= 0){
            if(board[i][j])
                return false;
            i--;
        }
        
        i = row;
        j = col;
        while(i >=0 && j >= 0){
            if(board[i][j])
                return false;
            i--;
            j--;
        }
        
        i = row;
        j = col;
        while(i >= 0 && j < n){
            if(board[i][j])
                return false;
            i--;
            j++;
        }
        return true;
    }
    
}

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n = nums.length;
		int low = 0, high = n - 1;
        while(low <= high){
            int mid = (low + high) / 2;
            if((mid == 0 || nums[mid] != nums[mid - 1]) && 
              ( mid == n - 1 || nums[mid] != nums[mid + 1])){
                return nums[mid];
            }else if(mid % 2 == 0){
                if(mid > 0 && nums[mid] == nums[mid - 1]){
                    high = mid - 1;
                }else{
                    low = mid + 1;
                }
            }else{
                if(mid > 0 && nums[mid] == nums[mid - 1]){
                    low = mid + 1;
                }else{
                    high = mid - 1;
                }
            }
        }
        return -1;
    }
}

// TC :- 0(LogN)
// SC :- 0(1)
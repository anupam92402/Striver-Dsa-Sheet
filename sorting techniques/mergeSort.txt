public class Solution {
	public static void mergeSort(int[] arr, int n) {
		mergeSort(arr, 0, n - 1);
	}
	public static void mergeSort(int[] arr, int low, int high) {
		if(low == high)
			return;
		int mid = (low + high) / 2;
		mergeSort(arr, low, mid);
		mergeSort(arr, mid + 1, high);
		merge(arr, low, mid, high);
	}
	public static void merge(int[] arr, int low, int mid, int high){
		int left = low;
		int right = mid + 1;
		int[]temp = new int[high - low + 1];
		int idx = 0;
		while(left <= mid && right <= high){
			if(arr[left] <= arr[right]){
				temp[idx] = arr[left++];
			}else{
				temp[idx] = arr[right++];
			}
			idx++;
		}
		while(left <= mid){
			temp[idx++] = arr[left++];
		}
		while(right <= high){
			temp[idx++] = arr[right++];
		}
		idx = 0;
		for(int i = low; i <= high; i++){
			arr[i] = temp[idx++];
		}
	}
}

// TC - 0(NlogN)
// SC - 0(N)